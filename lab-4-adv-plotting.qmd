---
title: "Lab 4. Advanced Plotting"
author: "Jared Joseph"
format:
    html:
      self-contained: true
editor: source
---

```{r setup, include=FALSE}
library(ggplot2)
library(dplyr)
library(rscorecard)
```

## Introduction

Click here to access the lab on Github Classroom: [Github Classroom Assignment for Lab 4: Advanced Plotting](XXXXX)



## The Data

The data we will be using today comes from the [U.S. Department of Education College Scorecard](https://collegescorecard.ed.gov/). The college scorecard collects important data about universities across the country such as cost of attendance, acceptance rates, graduation rates, and the income of students from that institution after graduation. It also gives information on the student body, including how graduates from each major do after graduation. If you are curious, [you can see Smith's page here](https://collegescorecard.ed.gov/school/?167835-Smith-College).

The full scorecard data set is huge. It includes information about over 6500 institutions in the U.S., and has more than 3000 columns documenting information about those institutions. Today we will be using the `rscorecard` package to get a subset of the data.

To use the `rscorecard` package, you will need to get an Application Programming Interface (API) key. API keys grant you direct access to data that is often otherwise limited. You get to pull data directly into R without needing to download files from the web, and the provider gets to limit the data you can actually get. This arrangement is usually beneficial for everyone.

To get an API key for the college scorecard data, [you will need to request one on the data.gov web portal](https://api.data.gov/signup/). Once you fill out your information, you should get an email almost immediately with a personalized API key. This key is unique to you, so it is important to keep it safe. *You should never include your API keys in a file, especially those you commit with git. Other people can look through your git history and find your personal key to use for nefarious purposes!*

Once you have your key, run the following command in your console, replacing "SCORECARD_KEY" with your unique key:

```{r, eval=FALSE}
library(rscorecard)

sc_key(<SCORECARD_KEY>)
```

This will save your key to your R install. **For here on, you can run `sc_get()` to load your API key from memory** (until you re-install R). You will need to run that command as a part of the code whenever you want to get scorecard data. Run the following code to get our data for today:

```{r message=FALSE}
# set what variables we want

# school context
scorecard_variables_context = c("unitid", "instnm", "city", "highdeg", "control",
                                "hbcu", "annhi", "tribal", "aanapii", "hsi", "nanti")

# student info
scorecard_variables_students = c("unitid", "instnm", "ugds", "adm_rate",
                                 "costt4_a", "costt4_p", "pcip27", "pctfloan",
                                 "pctpell",  "admcon7", "cdr3")

# Get context data
scorecard_2020_context <- sc_init() |>       # Set up our API 'call'
  sc_year(2020) |>                           # Set the year to only 2020
  sc_filter(stabbr == "MA") |>               # Ask for only MA data
  sc_select_(scorecard_variables_context) |> # Set variables
  sc_get()                                   # Get the thing!

scorecard_2017_context <- sc_init() |>
  sc_year(2017) |>            
  sc_filter(stabbr == "MA") |>
  sc_select_(scorecard_variables_context) |>
  sc_get()

scorecard_2014_context <- sc_init() |>
  sc_year(2014) |>            
  sc_filter(stabbr == "MA") |>
  sc_select_(scorecard_variables_context) |>
  sc_get()

# Get student data
scorecard_2020_student <- sc_init() |>      
  sc_year(2020) |>                   
  sc_filter(stabbr == "MA") |>       
  sc_select_(scorecard_variables_students) |>
  sc_get()                           

scorecard_2017_student <- sc_init() |>
  sc_year(2017) |>            
  sc_filter(stabbr == "MA") |>
  sc_select_(scorecard_variables_students) |>
  sc_get()

scorecard_2014_student <- sc_init() |>
  sc_year(2014) |>            
  sc_filter(stabbr == "MA") |>
  sc_select_(scorecard_variables_students) |>
  sc_get()
```

We now have six dataframes containing data for MA universities and colleges. You will also need to download the scorecard documentation for this lab to understand the variables. You can find both the Data Dictionary and the Technical Documentation [on the scorecard website](https://collegescorecard.ed.gov/data/documentation/). I would save both in the `docs/` directory within your project folder.

Once you have downloaded the documentation, take some time to read up about each of the variables we will be using. The search function is helpful here.

:::{.callout-note}
### Question 1

Read through the data documentation and write short description of what each of the variables in our dataframes mean. Do you see any issues with the variables as they are defined?

*REPLACE THIS TEXT WITH YOUR ANSWER*

Data Ethics @ 	Progressing Toward Standard
More elaborate students will most likely focus on the cdr3 and how it is measured. 

| Var | Desc | type | detail |
|---|---|---|---|
| unitid | Unit ID for institution | integer | the unique identification number assigned to postsecondary institutions as surveyed through IPEDS. |
| instnm | Institution name | string |  |
| city | City | string |  |
| highdeg | Highest degree awarded 0 Non-degree-granting 1 Certificate degree 2 Associate degree 3 Bachelor's degree 4 Graduate degree | integer |  |
| control | Control of institution 1 - public, 2 - private non-profit, 3 - private for profit | integer |  |
| ugds | Enrollment of undergraduate certificate/degree-seeking students | integer |  |
| adm_rate | Admission rate | float |  |
| costt4_a | Average cost of attendance (academic year institutions) | integer | The average annual cost of attendance includes tuition and fees, books and supplies, and living expenses for all full-time, first-time, degree-/certificate-seeking undergraduates who receive Title IV aid. These data are available separately for academic year institutions (COSTT4_A) and for program-year institutions (COSTT4_P). For institutions primarily following an academic year-based calendar system, the element is representative of full-time, first-time undergraduate student costs for an entire academic year. For institutions primarily following a program-based or continuous enrollment calendar system, the cost of attendance for full-time, first-time students is provided for the program with the largest enrollment at the institution. Reported program costs cover the full length of the program, regardless of program length. |
| costt4_p | Average cost of attendance (program-year institutions) | integer |  |
| pcip27 | Percentage of degrees awarded in Mathematics And Statistics. | float |  |
| pctfloan | Percent of all undergraduate students receiving a federal student loan | float |  |
| admcon7 | Test score requirements for admission: 1 - required, 2 - recommended, 3 - neither require nor recommended, 4 - do not know, 5 - considered but not required | integer |  |
| cdr3 | Three-year cohort default rate | float | Cohort default rates are produced annually34 as an institutional accountability metric; institutions with high default rates may lose access to federal financial aid. The three-year cohort default rate (CDR3) represents a snapshot in time. For example, FY 2016 rates were calculated using the cohort of borrowers who entered repayment on their federal student loans between October 1, 2015 and September 30, 2016, and who defaulted before September 30, 2018. |
| PCTPELL | Percentage of undergraduates who receive a Pell Grant |  |  |
| HBCU | Flag for Historically Black College and University |  |  |
| ANNHI | Flag for Alaska Native Native Hawaiian serving institution |  |  |
| TRIBAL | Flag for tribal college and university |  |  |
| AANAPII | Flag for Asian American Native American Pacific Islander-serving institution |  |  |
| HSI | Flag for Hispanic-serving institution |  |  |
| NANTI | Flag for Native American non-tribal institution |  |  |
:::

:::{.callout-note}
### Question 2

Combine all of the scorecard dataframes into one called `scorecard_all`. You should have only one column for each variable. Optionally, remove the now redundant dataframes from your environment.
:::

:::{.callout-tip}
Our questions are going to start becoming more complex as we learn more data science skills. It is recommended you annotate your code with comments to keep track of the various steps.
:::

```{r}

#<REPLACE THIS COMMENT WITH YOR ANSWER>
# Data Aggregation & Subsetting @	Meets Standard

library(dplyr)

# rbind the years into one DF
scorecard_context_all = rbind(scorecard_2020_context, scorecard_2017_context, scorecard_2014_context)
scorecard_student_all = rbind(scorecard_2020_student, scorecard_2017_student, scorecard_2014_student)

# join the diff variables into one df
# shouldn't matter what join type they use
scorecard_all = full_join(scorecard_context_all, scorecard_student_all, by = c("unitid", "instnm", "year"))

# tidy up
rm(scorecard_2020_context, scorecard_2017_context, scorecard_2014_context,
   scorecard_2020_student, scorecard_2017_student, scorecard_2014_student,
   scorecard_context_all, scorecard_student_all)
```

## Exploratory Data Analyses (EDA) & Cleaning

Once you have combined the data and familiarized yourself with the variables, we need to take some time to understand the dataset.

:::{.callout-note}
### Question 3

Perform some EDA on our dataset. Confirm that all of the variables are represented by the correct data type in R. Correct them if they are not.
:::

```{r}

#<REPLACE THIS COMMENT WITH YOR ANSWER>

# Data Cleaning @ Meets Standard
# they will be at meets standard if they recode the variables appropriately

# I am looking for them to use the as.XXXX() functions to recode the logical variables to logical (HBCU, ANNHI, TRIBAL, AANAPII, HSI, NANTI)
# however some of these are all 0s (there are no HBCUs in MA for example), so some may skip those.
scorecard_all$hbcu = as.logical(scorecard_all$hbcu)
scorecard_all$annhi = as.logical(scorecard_all$annhi)
scorecard_all$tribal = as.logical(scorecard_all$tribal)
scorecard_all$aanapii = as.logical(scorecard_all$aanapii)
scorecard_all$hsi = as.logical(scorecard_all$hsi)
scorecard_all$nanti = as.logical(scorecard_all$nanti)

# If we are being 100%, factors should also be re-coded, but I don't expect them to. We haven't done much with factors. Most factor-likes are already characters. The one exception is unitid which right now is treated as numeric. Re-coding this would show a good understanding of data.
scorecard_all$unitid = factor(scorecard_all$unitid)

```

:::{.callout-note}
### Question 4

Do any other variables require re-coding? If so, do that now.
:::

:::{.callout-tip}
Depending on the tool you use to re-code, you may get an error saying "✖ Can't convert <character> to <integer>." This is the tidyverse trying to protect you, but being overzealous. You can sidestep this by converting the entire column into a character first, or using `as.data.frame()` to turn the tibble (a tidyverse dataframe) back into a normal R dataframe.
:::

```{r}

#<REPLACE THIS COMMENT WITH YOR ANSWER>

# Data Cleaning @ Meets Standard
# they will be at meets standard if they recode the variables appropriately

# tidy thinking it knows better than me.
scorecard_all = as.data.frame(scorecard_all)

# They could also recode some of the categorical data as follows
# highdeg
scorecard_all[scorecard_all$highdeg == 0, "highdeg"] = "Non-degree-granting"
scorecard_all[scorecard_all$highdeg == 1, "highdeg"] = "Certificate degree"
scorecard_all[scorecard_all$highdeg == 2, "highdeg"] = "Associate degree"
scorecard_all[scorecard_all$highdeg == 3, "highdeg"] = "Bachelor's degree"
scorecard_all[scorecard_all$highdeg == 4, "highdeg"] = "Graduate degree"

# control
scorecard_all[scorecard_all$control == 1, "control"] = "public"
scorecard_all[scorecard_all$control == 2, "control"] = "private non-profit"
scorecard_all[scorecard_all$control == 3, "control"] = "private for-profit"

# admcon7
scorecard_all[scorecard_all$admcon7 == 1 & !is.na(scorecard_all$admcon7), "admcon7"] = "required"
scorecard_all[scorecard_all$admcon7 == 2 & !is.na(scorecard_all$admcon7), "admcon7"] = "recommended"
scorecard_all[scorecard_all$admcon7 == 3 & !is.na(scorecard_all$admcon7), "admcon7"] = "neither"
scorecard_all[scorecard_all$admcon7 == 4 & !is.na(scorecard_all$admcon7), "admcon7"] = "do not know"
scorecard_all[scorecard_all$admcon7 == 5 & !is.na(scorecard_all$admcon7), "admcon7"] = "considered"
```

## Communicating with Plots

:::{.callout-note}
### Question 5

Create a plot that shows the relationship between the admission rate, cost of attendance (4-year programs), and the control of the institution.
:::

```{r}

#<REPLACE THIS COMMENT WITH YOR ANSWER>

# Visualization Structure @ Meets Standard if scatterplot (point or jitter geoms). Others may work, but can't think of them off hand
# Visualization Context @ Meets Standard, Do they add labels to axes, title, etc? Could be exceeds if they do callouts, cite data source, etc
# Visualization Aesthetics @ ???, will need to refer to standards and look at plot

# I would be pleasantly surprised if they dealt with year in some way

# I have highlighted smith in this plot just for my own curiosity.
ggplot(scorecard_all) +
  aes(x = adm_rate, y = costt4_a, color = control) +
  geom_point(shape = "circle", size = 1.5) +
  geom_point(data = scorecard_all[scorecard_all$unitid == 167835, ], aes(x = adm_rate, y = costt4_a, color = "Smith"), shape = "square", size = 3) +
  scale_color_brewer(palette = "Set1", direction = 1) +
  labs(
    x = "Admission Rate",
    y = "Cost (USD)",
    title = "Cost of Attendance By Admit Rate",
    subtitle = "For Unis/Colleges in MA",
    caption = "Source: U.S. Dept. of Ed College Scorecard",
    color = "Type"
  ) +
  theme_minimal() +
  facet_wrap(vars(year))
```

:::{.callout-note}
### Question 6

What patterns can we see in this plot? If you had to explain the story here to someone who cannot see the plot themselves, what would you say?

*REPLACE THIS TEXT WITH YOUR ANSWER*

No standard, but can contribute to all vis standards if they explain something well

If they get the facet by year, they will see the price increase over time. Otherwise they should talk about the separation of the class of unis, and how that relates to their cost/admission rate. Public are way less expensive and largely less selective, a few unis are hyper selective and expensive, etc.  
:::

:::{.callout-note}
### Question 7

Create a plot which shows the relationship between the highest degree awarded by an institution and the three-year cohort default rate. I want to see the distribution of the default rate per institution type, rather than just the frequency. Only use 2017 data for this plot.
:::

```{r}

#<REPLACE THIS COMMENT WITH YOR ANSWER>

# Visualization Structure @ Meets Standard if boxplot or violin. I do NOT want a bar plot. Maybe bonus for callouts
# Visualization Context @ Meets Standard, Do they add labels to axes, title, etc.
# Visualization Aesthetics @ ???, will need to refer to standards and look at plot, chance to score high if they use any tools to highlight the outliers.

# They need to subset to just 2020 data somehow

scorecard_all %>%
 filter(year == 2017) %>%
 ggplot() +
  aes(x = highdeg, y = cdr3) +
  geom_boxplot(fill = "#112446") +
  labs(
    x = "Highest Degree Awarded at Institution",
    y = "Three-year Cohort Default Rate",
    title = "Relationship Between Highest Degree Available and Cohort Default",
    caption = "Source: U.S. Dept of Ed. College Scorecard"
  ) +
  theme_minimal()
```

:::{.callout-note}
### Question 8

Is there any pattern in three-year cohort default rates by the highest degree type an institution grants?

*REPLACE THIS TEXT WITH YOUR ANSWER*

Yes, most "traditional" colleges (those that offer 4 year + grad degrees) have their students default less often than other kinds (at least from 2017 data).
:::

:::{.callout-note}
### CHALLANGE QUESTION

Using any and all of the tools at your disposal (within R), create a "publication ready" (ready to be shared widely) data visualization that highlights (in a good or bad way) Smith College in the scorecard data.
:::

```{r}

#<REPLACE THIS COMMENT WITH YOR ANSWER>

# All Data Vis Standards, potentially more depending on the extent to which data is transformed prior to vis.
# Here is a chance for those at any skill level to try and raise their rating, and for those that "get it" to flex a bit.
```


